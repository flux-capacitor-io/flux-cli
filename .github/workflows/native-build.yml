name: Native Image Build

on:
  workflow_call:
  workflow_dispatch:

jobs:
  native-build:
    name: Build Native Image - ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux-amd64
            runner: ubuntu-latest
            artifact-name: flux-linux-amd64
          - os: macos-amd64
            runner: macos-13
            artifact-name: flux-macos-amd64
          - os: macos-arm64
            runner: macos-14
            artifact-name: flux-macos-arm64
          - os: windows-amd64
            runner: windows-latest
            artifact-name: flux-windows-amd64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build native image
        timeout-minutes: 15
        shell: bash
        run: |
          echo "Building ${{ matrix.os }} native image"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Host: $(uname -m), CPU cores: $(sysctl -n hw.ncpu)"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Host: Windows, CPU cores: $NUMBER_OF_PROCESSORS"
            systeminfo | findstr "Total Physical Memory"
          else
            echo "Host: $(uname -m), CPU cores: $(nproc), Memory: $(free -h | head -2)"
          fi
          ./gradlew nativeCompile -x test --info

      - name: Verify native image
        shell: bash
        run: |
          echo "Testing native executable..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./build/native/nativeCompile/flux.exe version
            ./build/native/nativeCompile/flux.exe templates list
          else
            ./build/native/nativeCompile/flux version
            ./build/native/nativeCompile/flux templates list
          fi
          echo "Native image verification successful!"

      - name: Integration test - Generate example project
        shell: bash
        run: |
          echo "Running integration test - generating example project..."
          
          # Create test directory and navigate to it
          mkdir -p test-workspace
          cd test-workspace
          
          # Run the CLI to generate an example project
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ../build/native/nativeCompile/flux.exe init --template=flux-java-single --name=example-project --git
          else
            ../build/native/nativeCompile/flux init --template=flux-java-single --name=example-project --git
          fi
          
          # Verify the project was created
          if [ ! -d "example-project" ]; then
            echo "ERROR: example-project directory was not created!"
            exit 1
          fi
          
          # Check for key files that should exist in a Java project
          cd example-project
          if [ ! -f "pom.xml" ]; then
            echo "ERROR: pom.xml not found!"
            exit 1
          fi
          
          if [ ! -d "src/main/java" ]; then
            echo "ERROR: src/main/java directory not found!"
            exit 1
          fi
          
          # Verify git repository was initialized
          if [ ! -d ".git" ]; then
            echo "ERROR: Git repository was not initialized!"
            exit 1
          fi
          
          # List the generated structure for debugging
          echo "Generated project structure:"
          find . -type f | head -20
          
          echo "Integration test successful - example project generated correctly!"

      - name: Upload native executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ./build/native/nativeCompile/flux${{ runner.os == 'Windows' && '.exe' || '' }}
          retention-days: 30